commit bd861945d2a0273e5cff0edc0aadfd5fbbaac5f0
Author: Kohei Yoshida <kohei.yoshida@gmail.com>
Date:   Tue Jan 16 20:14:16 2024 -0500

    Switch to mdds API version 3.0

diff --git a/configure.ac b/configure.ac
index 0e1435b9..aafa815e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -256,7 +256,7 @@ AS_IF([test "x$with_tools" != "xno"], [
 # ============
 # mdds support
 # ============
-PKG_CHECK_MODULES([MDDS],[mdds-2.1 >= 2.1.1])
+PKG_CHECK_MODULES([MDDS],[mdds-3.0 >= 2.1.99])
 CXXFLAGS="$CXXFLAGS $MDDS_CFLAGS"
 
 # =================
diff --git a/src/liborcus/gnumeric_styles_context.cpp b/src/liborcus/gnumeric_styles_context.cpp
index b2c6058f..b5060d12 100644
--- a/src/liborcus/gnumeric_styles_context.cpp
+++ b/src/liborcus/gnumeric_styles_context.cpp
@@ -20,10 +20,10 @@ namespace {
 
 namespace hor_align {
 
-using map_type = mdds::sorted_string_map<ss::hor_alignment_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::hor_alignment_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "GNM_HALIGN_CENTER", ss::hor_alignment_t::center },
     { "GNM_HALIGN_DISTRIBUTED", ss::hor_alignment_t::distributed },
     { "GNM_HALIGN_GENERAL", ss::hor_alignment_t::unknown },
@@ -42,10 +42,10 @@ const map_type& get()
 
 namespace ver_align {
 
-using map_type = mdds::sorted_string_map<ss::ver_alignment_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::ver_alignment_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "GNM_VALIGN_BOTTOM", ss::ver_alignment_t::bottom },
     { "GNM_VALIGN_CENTER", ss::ver_alignment_t::middle },
     { "GNM_VALIGN_DISTRIBUTED", ss::ver_alignment_t::distributed },
diff --git a/src/liborcus/gnumeric_types.cpp b/src/liborcus/gnumeric_types.cpp
index c02627a1..b1218abf 100644
--- a/src/liborcus/gnumeric_types.cpp
+++ b/src/liborcus/gnumeric_types.cpp
@@ -16,10 +16,10 @@ namespace orcus {
 
 namespace value_format_type {
 
-using map_type = mdds::sorted_string_map<gnumeric_value_format_type, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<gnumeric_value_format_type>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "bold", gnumeric_value_format_type::bold },
     { "color", gnumeric_value_format_type::color },
     { "family", gnumeric_value_format_type::family },
diff --git a/src/liborcus/measurement.cpp b/src/liborcus/measurement.cpp
index f034595b..4cf64647 100644
--- a/src/liborcus/measurement.cpp
+++ b/src/liborcus/measurement.cpp
@@ -51,10 +51,10 @@ namespace {
 
 namespace length {
 
-using map_type = mdds::sorted_string_map<length_unit_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<length_unit_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "cm", length_unit_t::centimeter },
     { "in", length_unit_t::inch },
diff --git a/src/liborcus/odf_helper.cpp b/src/liborcus/odf_helper.cpp
index 7198b742..26c3cf9a 100644
--- a/src/liborcus/odf_helper.cpp
+++ b/src/liborcus/odf_helper.cpp
@@ -21,10 +21,10 @@ namespace {
 
 namespace border_style {
 
-using map_type = mdds::sorted_string_map<spreadsheet::border_style_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<spreadsheet::border_style_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "dash-dot", spreadsheet::border_style_t::dash_dot },
     { "dash-dot-dot", spreadsheet::border_style_t::dash_dot_dot },
@@ -46,10 +46,10 @@ const map_type& get()
 
 namespace underline_width {
 
-using map_type = mdds::sorted_string_map<spreadsheet::underline_width_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<spreadsheet::underline_width_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "auto", ss::underline_width_t::automatic },
     { "bold", ss::underline_width_t::bold },
@@ -69,10 +69,10 @@ const map_type& get()
 
 namespace underline_style {
 
-using map_type = mdds::sorted_string_map<ss::underline_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::underline_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "dash", ss::underline_t::dash },
     { "dot-dash", ss::underline_t::dot_dash },
@@ -94,10 +94,10 @@ const map_type& get()
 
 namespace hor_align {
 
-using map_type = mdds::sorted_string_map<spreadsheet::hor_alignment_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<spreadsheet::hor_alignment_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "center", spreadsheet::hor_alignment_t::center },
     { "end", spreadsheet::hor_alignment_t::right },
@@ -115,10 +115,10 @@ const map_type& get()
 
 namespace ver_align {
 
-using map_type = mdds::sorted_string_map<spreadsheet::ver_alignment_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<spreadsheet::ver_alignment_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "bottom", spreadsheet::ver_alignment_t::bottom },
     { "justified", spreadsheet::ver_alignment_t::justified },
diff --git a/src/liborcus/odf_style_context.cpp b/src/liborcus/odf_style_context.cpp
index 70953a10..605203ff 100644
--- a/src/liborcus/odf_style_context.cpp
+++ b/src/liborcus/odf_style_context.cpp
@@ -27,15 +27,15 @@ namespace style_family {
 
 using map_type = mdds::sorted_string_map<odf_style_family>;
 
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
-    { MDDS_ASCII("graphic"), style_family_graphic },
-    { MDDS_ASCII("paragraph"), style_family_paragraph },
-    { MDDS_ASCII("table"), style_family_table },
-    { MDDS_ASCII("table-cell"), style_family_table_cell },
-    { MDDS_ASCII("table-column"), style_family_table_column },
-    { MDDS_ASCII("table-row"), style_family_table_row },
-    { MDDS_ASCII("text"), style_family_text }
+    { "graphic", style_family_graphic },
+    { "paragraph", style_family_paragraph },
+    { "table", style_family_table },
+    { "table-cell", style_family_table_cell },
+    { "table-column", style_family_table_column },
+    { "table-row", style_family_table_row },
+    { "text", style_family_text }
 };
 
 const map_type& get()
@@ -53,15 +53,7 @@ odf_style_family to_style_family(std::string_view val)
 
 std::string_view to_string(odf_style_family family)
 {
-    static constexpr std::string_view unknown_str = "unknown";
-
-    for (const auto& entry : style_family::entries)
-    {
-        if (entry.value == family)
-            return {entry.key, entry.key_length};
-    }
-
-    return unknown_str;
+    return style_family::get().find_key(family);
 }
 
 namespace st_style {
@@ -69,16 +61,16 @@ namespace st_style {
 typedef mdds::sorted_string_map<ss::strikethrough_style_t> map_type;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
-    { MDDS_ASCII("dash"), ss::strikethrough_style_t::dash },
-    { MDDS_ASCII("dot-dash"), ss::strikethrough_style_t::dot_dash },
-    { MDDS_ASCII("dot-dot-dash"), ss::strikethrough_style_t::dot_dot_dash },
-    { MDDS_ASCII("dotted"), ss::strikethrough_style_t::dotted },
-    { MDDS_ASCII("long-dash"), ss::strikethrough_style_t::long_dash },
-    { MDDS_ASCII("none"), ss::strikethrough_style_t::none },
-    { MDDS_ASCII("solid"), ss::strikethrough_style_t::solid },
-    { MDDS_ASCII("wave"), ss::strikethrough_style_t::wave },
+    { "dash", ss::strikethrough_style_t::dash },
+    { "dot-dash", ss::strikethrough_style_t::dot_dash },
+    { "dot-dot-dash", ss::strikethrough_style_t::dot_dot_dash },
+    { "dotted", ss::strikethrough_style_t::dotted },
+    { "long-dash", ss::strikethrough_style_t::long_dash },
+    { "none", ss::strikethrough_style_t::none },
+    { "solid", ss::strikethrough_style_t::solid },
+    { "wave", ss::strikethrough_style_t::wave },
 };
 
 const map_type& get()
diff --git a/src/liborcus/ods_content_xml_context.cpp b/src/liborcus/ods_content_xml_context.cpp
index 5f07594a..ee05fa1f 100644
--- a/src/liborcus/ods_content_xml_context.cpp
+++ b/src/liborcus/ods_content_xml_context.cpp
@@ -31,10 +31,10 @@ namespace {
 
 namespace cell_value {
 
-using map_type = mdds::sorted_string_map<ods_content_xml_context::cell_value_type, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ods_content_xml_context::cell_value_type>;
 
 // Keys must be sorted.
-map_type::entry entries[] = {
+map_type::entry_type entries[] = {
     { "date",   ods_content_xml_context::vt_date },
     { "float",  ods_content_xml_context::vt_float },
     { "string", ods_content_xml_context::vt_string }
diff --git a/src/liborcus/spreadsheet_types.cpp b/src/liborcus/spreadsheet_types.cpp
index 3b7d357d..47d027b0 100644
--- a/src/liborcus/spreadsheet_types.cpp
+++ b/src/liborcus/spreadsheet_types.cpp
@@ -19,10 +19,10 @@ namespace {
 
 namespace trf {
 
-using map_type = mdds::sorted_string_map<totals_row_function_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<totals_row_function_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "average",   totals_row_function_t::average },
     { "count",     totals_row_function_t::count },
     { "countNums", totals_row_function_t::count_numbers },
@@ -45,10 +45,10 @@ const map_type& get()
 
 namespace pc_group_by {
 
-using map_type = mdds::sorted_string_map<pivot_cache_group_by_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<pivot_cache_group_by_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "days",     pivot_cache_group_by_t::days },
     { "hours",    pivot_cache_group_by_t::hours },
     { "minutes",  pivot_cache_group_by_t::minutes },
@@ -69,10 +69,10 @@ const map_type& get()
 
 namespace error_value {
 
-using map_type = mdds::sorted_string_map<error_value_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<error_value_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "#DIV/0!", error_value_t::div0  },
     { "#N/A!",   error_value_t::na    },
@@ -93,9 +93,9 @@ const map_type& get()
 
 namespace named_colors {
 
-using map_type = mdds::sorted_string_map<color_rgb_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<color_rgb_t>;
 
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "aliceblue", { 0xF0, 0xF8, 0xFF } },
     { "antiquewhite", { 0xFA, 0xEB, 0xD7 } },
@@ -247,10 +247,10 @@ const map_type& get()
 
 namespace formula_error_policy {
 
-using map_type = mdds::sorted_string_map<formula_error_policy_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<formula_error_policy_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "fail", formula_error_policy_t::fail },
     { "skip", formula_error_policy_t::skip },
 };
diff --git a/src/liborcus/xls_xml_context.cpp b/src/liborcus/xls_xml_context.cpp
index ed306165..21fd9202 100644
--- a/src/liborcus/xls_xml_context.cpp
+++ b/src/liborcus/xls_xml_context.cpp
@@ -53,10 +53,10 @@ ss::color_rgb_t to_rgb(std::string_view s)
 
 namespace border_dir {
 
-using map_type = mdds::sorted_string_map<ss::border_direction_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::border_direction_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "Bottom",        ss::border_direction_t::bottom         },
     { "DiagonalLeft",  ss::border_direction_t::diagonal_tl_br },
     { "DiagonalRight", ss::border_direction_t::diagonal_bl_tr },
@@ -75,10 +75,10 @@ const map_type& get()
 
 namespace border_style {
 
-using map_type = mdds::sorted_string_map<ss::border_style_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::border_style_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "Continuous",   ss::border_style_t::solid          },
     { "Dash",         ss::border_style_t::dashed         },
     { "DashDot",      ss::border_style_t::dash_dot       },
@@ -98,10 +98,10 @@ const map_type& get()
 
 namespace hor_align {
 
-using map_type = mdds::sorted_string_map<ss::hor_alignment_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::hor_alignment_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "Center",      ss::hor_alignment_t::center      },
     { "Distributed", ss::hor_alignment_t::distributed },
     { "Justify",     ss::hor_alignment_t::justified   },
@@ -119,10 +119,10 @@ const map_type& get()
 
 namespace ver_align {
 
-using map_type = mdds::sorted_string_map<ss::ver_alignment_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::ver_alignment_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "Bottom",      ss::ver_alignment_t::bottom      },
     { "Center",      ss::ver_alignment_t::middle      },
     { "Distributed", ss::ver_alignment_t::distributed },
@@ -140,10 +140,10 @@ const map_type& get()
 
 namespace num_format {
 
-using map_type = mdds::sorted_string_map<std::string_view, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<std::string_view>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "Currency", "$#,##0.00_);[Red]($#,##0.00)" },
     { "Euro Currency", "[$\xe2\x82\xac-x-euro2] #,##0.00_);[Red]([$\xe2\x82\xac-x-euro2] #,##0.00)" },
     { "Fixed", "0.00" },
@@ -173,10 +173,10 @@ const map_type& get()
 
 namespace underline {
 
-using map_type = mdds::sorted_string_map<ss::underline_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::underline_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "Double", ss::underline_t::double_line },
     { "DoubleAccounting", ss::underline_t::double_accounting },
     { "None", ss::underline_t::none },
diff --git a/src/liborcus/xlsx_conditional_format_context.cpp b/src/liborcus/xlsx_conditional_format_context.cpp
index e667d834..a16ecab8 100644
--- a/src/liborcus/xlsx_conditional_format_context.cpp
+++ b/src/liborcus/xlsx_conditional_format_context.cpp
@@ -93,67 +93,67 @@ typedef mdds::sorted_string_map<xlsx_cond_format_operator> cond_format_operator_
 
 typedef mdds::sorted_string_map<xlsx_cond_format_date> cond_format_date_map;
 
-cond_format_type_map::entry cond_format_type_entries[] =
+constexpr cond_format_type_map::entry_type cond_format_type_entries[] =
 {
-    { MDDS_ASCII("aboveAverage"), aboveAverage },
-    { MDDS_ASCII("beginsWith"), beginsWith },
-    { MDDS_ASCII("cellIs"), cellIs },
-    { MDDS_ASCII("colorScale"), colorScale },
-    { MDDS_ASCII("containsBlanks"), containsBlanks },
-    { MDDS_ASCII("containsErrors"), containsErrors },
-    { MDDS_ASCII("containsText"), containsText },
-    { MDDS_ASCII("dataBar"), dataBar },
-    { MDDS_ASCII("duplicateValues"), duplicateValues },
-    { MDDS_ASCII("endsWith"), endsWith },
-    { MDDS_ASCII("expression"), expression },
-    { MDDS_ASCII("iconSet"), iconSet },
-    { MDDS_ASCII("notContainsErrors"), notContainsErrors },
-    { MDDS_ASCII("notContainsText"), notContainsText },
-    { MDDS_ASCII("timePeriod"), timePeriod },
-    { MDDS_ASCII("top10"), top10 },
-    { MDDS_ASCII("uniqueValues"), uniqueValues }
+    { "aboveAverage", aboveAverage },
+    { "beginsWith", beginsWith },
+    { "cellIs", cellIs },
+    { "colorScale", colorScale },
+    { "containsBlanks", containsBlanks },
+    { "containsErrors", containsErrors },
+    { "containsText", containsText },
+    { "dataBar", dataBar },
+    { "duplicateValues", duplicateValues },
+    { "endsWith", endsWith },
+    { "expression", expression },
+    { "iconSet", iconSet },
+    { "notContainsErrors", notContainsErrors },
+    { "notContainsText", notContainsText },
+    { "timePeriod", timePeriod },
+    { "top10", top10 },
+    { "uniqueValues", uniqueValues }
 };
 
-cond_format_operator_map::entry cond_format_operator_entries[] =
+constexpr cond_format_operator_map::entry_type cond_format_operator_entries[] =
 {
-    { MDDS_ASCII("beginsWith"), operator_beginsWith },
-    { MDDS_ASCII("between"), operator_between },
-    { MDDS_ASCII("containsText"), operator_containsText },
-    { MDDS_ASCII("endsWith"), operator_endsWith },
-    { MDDS_ASCII("equal"), operator_equal },
-    { MDDS_ASCII("greaterThan"), operator_greaterThan },
-    { MDDS_ASCII("greaterThanOrEqual"), operator_greaterThanOrEqual },
-    { MDDS_ASCII("lessThan"), operator_lessThan },
-    { MDDS_ASCII("lessThanOrEqual"), operator_lessThanOrEqual },
-    { MDDS_ASCII("notBetween"), operator_notBetween },
-    { MDDS_ASCII("notContains"), operator_notContains },
-    { MDDS_ASCII("notEqual"), operator_notEqual }
+    { "beginsWith", operator_beginsWith },
+    { "between", operator_between },
+    { "containsText", operator_containsText },
+    { "endsWith", operator_endsWith },
+    { "equal", operator_equal },
+    { "greaterThan", operator_greaterThan },
+    { "greaterThanOrEqual", operator_greaterThanOrEqual },
+    { "lessThan", operator_lessThan },
+    { "lessThanOrEqual", operator_lessThanOrEqual },
+    { "notBetween", operator_notBetween },
+    { "notContains", operator_notContains },
+    { "notEqual", operator_notEqual }
 };
 
-cond_format_date_map::entry cond_format_date_entries[] =
+constexpr cond_format_date_map::entry_type cond_format_date_entries[] =
 {
-    { MDDS_ASCII("last7Days"), date_last7Days },
-    { MDDS_ASCII("lastMonth"), date_lastMonth },
-    { MDDS_ASCII("lastWeek"), date_lastWeek },
-    { MDDS_ASCII("nextMonth"), date_nextMonth },
-    { MDDS_ASCII("thisMonth"), date_thisMonth },
-    { MDDS_ASCII("thisWeek"), date_thisWeek },
-    { MDDS_ASCII("today"), date_today },
-    { MDDS_ASCII("tomorrow"), date_tomorrow },
-    { MDDS_ASCII("yesterday"), date_yesterday }
+    { "last7Days", date_last7Days },
+    { "lastMonth", date_lastMonth },
+    { "lastWeek", date_lastWeek },
+    { "nextMonth", date_nextMonth },
+    { "thisMonth", date_thisMonth },
+    { "thisWeek", date_thisWeek },
+    { "today", date_today },
+    { "tomorrow", date_tomorrow },
+    { "yesterday", date_yesterday }
 };
 
-cond_format_boolean_map::entry cond_format_boolean_entries[] =
+constexpr cond_format_boolean_map::entry_type cond_format_boolean_entries[] =
 {
-    { MDDS_ASCII("0"), boolean_false },
-    { MDDS_ASCII("1"), boolean_true },
-    { MDDS_ASCII("false"), boolean_true },
-    { MDDS_ASCII("true"), boolean_false }
+    { "0", boolean_false },
+    { "1", boolean_true },
+    { "false", boolean_true },
+    { "true", boolean_false }
 };
 
 bool parse_boolean_flag(const xml_token_attr_t& attr, bool default_value)
 {
-    static const cond_format_boolean_map boolean_map(cond_format_boolean_entries, sizeof(cond_format_boolean_entries)/sizeof(cond_format_boolean_entries[0]), boolean_default);    
+    static const cond_format_boolean_map boolean_map(cond_format_boolean_entries, sizeof(cond_format_boolean_entries)/sizeof(cond_format_boolean_entries[0]), boolean_default);
     xlsx_cond_format_boolean val = boolean_map.find(attr.value.data(), attr.value.size());
     switch (val)
     {
@@ -475,14 +475,14 @@ enum xlsx_cond_format_cfvo_type
 
 typedef mdds::sorted_string_map<xlsx_cond_format_cfvo_type> cond_format_cfvo_type_map;
 
-cond_format_cfvo_type_map::entry cond_format_cfvo_entries[] =
+constexpr cond_format_cfvo_type_map::entry_type cond_format_cfvo_entries[] =
 {
-    { MDDS_ASCII("num"), cfvo_num },
-    { MDDS_ASCII("percent"), cfvo_percent },
-    { MDDS_ASCII("max"), cfvo_max },
-    { MDDS_ASCII("min"), cfvo_min },
-    { MDDS_ASCII("formula"), cfvo_formula },
-    { MDDS_ASCII("percentile"), cfvo_percentile },
+    { "num", cfvo_num },
+    { "percent", cfvo_percent },
+    { "max", cfvo_max },
+    { "min", cfvo_min },
+    { "formula", cfvo_formula },
+    { "percentile", cfvo_percentile },
 };
 
 }
diff --git a/src/liborcus/xlsx_pivot_context.cpp b/src/liborcus/xlsx_pivot_context.cpp
index 026914d4..f3a0ed12 100644
--- a/src/liborcus/xlsx_pivot_context.cpp
+++ b/src/liborcus/xlsx_pivot_context.cpp
@@ -28,10 +28,10 @@ namespace {
 
 namespace pc_source {
 
-using map_type = mdds::sorted_string_map<xlsx_pivot_cache_def_context::source_type, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<xlsx_pivot_cache_def_context::source_type>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "consolidation", xlsx_pivot_cache_def_context::source_type::consolidation },
     { "external",      xlsx_pivot_cache_def_context::source_type::external      },
     { "scenario",      xlsx_pivot_cache_def_context::source_type::scenario      },
diff --git a/src/liborcus/xlsx_sheet_context.cpp b/src/liborcus/xlsx_sheet_context.cpp
index 1363c51a..af3b5a59 100644
--- a/src/liborcus/xlsx_sheet_context.cpp
+++ b/src/liborcus/xlsx_sheet_context.cpp
@@ -33,10 +33,10 @@ namespace {
 
 namespace sheet_pane {
 
-using map_type = mdds::sorted_string_map<ss::sheet_pane_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::sheet_pane_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "bottomLeft",  ss::sheet_pane_t::bottom_left  },
     { "bottomRight", ss::sheet_pane_t::bottom_right },
     { "topLeft",     ss::sheet_pane_t::top_left     },
@@ -53,10 +53,10 @@ const map_type& get()
 
 namespace pane_state {
 
-using map_type = mdds::sorted_string_map<ss::pane_state_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::pane_state_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "frozen",      ss::pane_state_t::frozen       },
     { "frozenSplit", ss::pane_state_t::frozen_split },
     { "split",       ss::pane_state_t::split        },
@@ -72,10 +72,10 @@ const map_type& get()
 
 namespace formula_type {
 
-using map_type = mdds::sorted_string_map<ss::formula_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::formula_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "array",     ss::formula_t::array      },
     { "dataTable", ss::formula_t::data_table },
     { "normal",    ss::formula_t::normal     },
diff --git a/src/liborcus/xlsx_styles_context.cpp b/src/liborcus/xlsx_styles_context.cpp
index 29454b17..e7ba919d 100644
--- a/src/liborcus/xlsx_styles_context.cpp
+++ b/src/liborcus/xlsx_styles_context.cpp
@@ -29,10 +29,10 @@ namespace {
 
 namespace border_style {
 
-using map_type = mdds::sorted_string_map<ss::border_style_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::border_style_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "dashDot",          ss::border_style_t::dash_dot            },
     { "dashDotDot",       ss::border_style_t::dash_dot_dot        },
     { "dashed",           ss::border_style_t::dashed              },
@@ -59,10 +59,10 @@ const map_type& get()
 
 namespace fill_pattern {
 
-using map_type = mdds::sorted_string_map<ss::fill_pattern_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::fill_pattern_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "darkDown",        ss::fill_pattern_t::dark_down        },
     { "darkGray",        ss::fill_pattern_t::dark_gray        },
     { "darkGrid",        ss::fill_pattern_t::dark_grid        },
@@ -94,10 +94,10 @@ const map_type& get()
 
 namespace underline {
 
-using map_type = mdds::sorted_string_map<ss::underline_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<ss::underline_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "double", ss::underline_t::double_line },
     { "doubleAccounting", ss::underline_t::double_accounting },
     { "none", ss::underline_t::none },
diff --git a/src/liborcus/xlsx_types.cpp b/src/liborcus/xlsx_types.cpp
index 3c0ba2a2..f66cb408 100644
--- a/src/liborcus/xlsx_types.cpp
+++ b/src/liborcus/xlsx_types.cpp
@@ -17,10 +17,10 @@ constexpr std::string_view str_unknown = "unknown";
 
 namespace cell_type {
 
-using map_type = mdds::sorted_string_map<xlsx_cell_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<xlsx_cell_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "b", xlsx_ct_boolean },
     { "e", xlsx_ct_error },
     { "inlineStr", xlsx_ct_inline_string },
@@ -39,10 +39,10 @@ const map_type& get()
 
 namespace rca {
 
-using map_type = mdds::sorted_string_map<xlsx_rev_row_column_action_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<xlsx_rev_row_column_action_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "deleteCol", xlsx_rev_rca_delete_column },
     { "deleteRow", xlsx_rev_rca_delete_row    },
     { "insertCol", xlsx_rev_rca_insert_column },
diff --git a/src/orcus_json_cli.cpp b/src/orcus_json_cli.cpp
index 98a4f393..0227d8ca 100644
--- a/src/orcus_json_cli.cpp
+++ b/src/orcus_json_cli.cpp
@@ -49,10 +49,10 @@ namespace {
 
 namespace mode {
 
-using map_type = mdds::sorted_string_map<detail::mode_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<detail::mode_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] =
+constexpr map_type::entry_type entries[] =
 {
     { "convert",   detail::mode_t::convert   },
     { "map",       detail::mode_t::map       },
diff --git a/src/orcus_xml_main.cpp b/src/orcus_xml_main.cpp
index a1f38c53..17b13bb0 100644
--- a/src/orcus_xml_main.cpp
+++ b/src/orcus_xml_main.cpp
@@ -43,10 +43,10 @@ enum class type {
     structure,
 };
 
-using map_type = mdds::sorted_string_map<type, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<type>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "dump",      type::dump          },
     { "map",       type::map           },
     { "map-gen",   type::map_gen       },
@@ -64,7 +64,7 @@ const map_type& get()
 
 std::string to_string(output_mode::type t)
 {
-    for (const output_mode::map_type::entry& e : output_mode::entries)
+    for (const output_mode::map_type::entry_type& e : output_mode::entries)
         if (t == e.value)
             return std::string(e.key);
 
diff --git a/src/parser/css_types.cpp b/src/parser/css_types.cpp
index 90791593..e88eeb6f 100644
--- a/src/parser/css_types.cpp
+++ b/src/parser/css_types.cpp
@@ -24,10 +24,10 @@ namespace {
 
 namespace pseudo_elem {
 
-using map_type = mdds::sorted_string_map<pseudo_element_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<pseudo_element_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "after",        pseudo_element_after        },
     { "backdrop",     pseudo_element_backdrop     },
     { "before",       pseudo_element_before       },
@@ -95,10 +95,10 @@ namespace {
 
 namespace pseudo_class {
 
-using map_type = mdds::sorted_string_map<pseudo_class_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<pseudo_class_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "active",           pseudo_class_active           },
     { "checked",          pseudo_class_checked          },
     { "default",          pseudo_class_default          },
@@ -159,8 +159,8 @@ std::string pseudo_class_to_string(pseudo_class_t val)
 {
     std::ostringstream os;
     std::size_t n = std::size(pseudo_class::entries);
-    const pseudo_class::map_type::entry* p = pseudo_class::entries;
-    const pseudo_class::map_type::entry* p_end = p + n;
+    const pseudo_class::map_type::entry_type* p = pseudo_class::entries;
+    const pseudo_class::map_type::entry_type* p_end = p + n;
     for (; p != p_end; ++p)
     {
         if (val & p->value)
@@ -172,25 +172,32 @@ std::string pseudo_class_to_string(pseudo_class_t val)
 
 namespace {
 
-typedef mdds::sorted_string_map<property_function_t> propfunc_map_type;
+namespace propfunc {
+
+using map_type = mdds::sorted_string_map<property_function_t>;
 
 // Keys must be sorted.
-propfunc_map_type::entry propfunc_type_entries[] = {
-    { MDDS_ASCII("hsl"),  property_function_t::hsl  },
-    { MDDS_ASCII("hsla"), property_function_t::hsla },
-    { MDDS_ASCII("rgb"),  property_function_t::rgb  },
-    { MDDS_ASCII("rgba"), property_function_t::rgba },
-    { MDDS_ASCII("url"),  property_function_t::url  }
+constexpr map_type::entry_type entries[] = {
+    { "hsl",  property_function_t::hsl  },
+    { "hsla", property_function_t::hsla },
+    { "rgb",  property_function_t::rgb  },
+    { "rgba", property_function_t::rgba },
+    { "url",  property_function_t::url  }
 };
 
+const map_type& get()
+{
+    static map_type map(entries, std::size(entries), property_function_t::unknown);
+    return map;
+}
+
+} // namespace propfunc
+
 }
 
 property_function_t to_property_function(std::string_view s)
 {
-    static propfunc_map_type propfunc_map(
-        propfunc_type_entries, std::size(propfunc_type_entries), property_function_t::unknown);
-
-    return propfunc_map.find(s.data(), s.size());
+    return propfunc::get().find(s.data(), s.size());
 }
 
 }}
diff --git a/src/parser/sax_token_parser.cpp b/src/parser/sax_token_parser.cpp
index fdf80c6e..aa6f3ed5 100644
--- a/src/parser/sax_token_parser.cpp
+++ b/src/parser/sax_token_parser.cpp
@@ -19,10 +19,10 @@ enum class decl_attr_type { unknown, version, encoding, standalone };
 
 namespace decl_attr {
 
-using map_type = mdds::sorted_string_map<decl_attr_type, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<decl_attr_type>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "encoding",   decl_attr_type::encoding   },
     { "standalone", decl_attr_type::standalone },
     { "version",    decl_attr_type::version    },
diff --git a/src/parser/types.cpp b/src/parser/types.cpp
index 5d469c5f..20888d14 100644
--- a/src/parser/types.cpp
+++ b/src/parser/types.cpp
@@ -458,10 +458,10 @@ namespace {
 
 namespace dump_format {
 
-using map_type = mdds::sorted_string_map<dump_format_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<dump_format_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "check",       dump_format_t::check       },
     { "csv",         dump_format_t::csv         },
     { "debug-state", dump_format_t::debug_state },
@@ -483,10 +483,10 @@ const map_type& get()
 
 namespace charset {
 
-using map_type = mdds::sorted_string_map<character_set_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<character_set_t>;
 
 // Keys must be sorted.
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "437", character_set_t::ibm437 },
     { "850", character_set_t::ibm850 },
     { "851", character_set_t::ibm851 },
diff --git a/src/parser/yaml_parser_base.cpp b/src/parser/yaml_parser_base.cpp
index df4db23f..7c704bfe 100644
--- a/src/parser/yaml_parser_base.cpp
+++ b/src/parser/yaml_parser_base.cpp
@@ -304,9 +304,9 @@ namespace {
 
 namespace keyword {
 
-using map_type = mdds::sorted_string_map<detail::keyword_t, mdds::string_view_map_entry>;
+using map_type = mdds::sorted_string_map<detail::keyword_t>;
 
-constexpr map_type::entry entries[] = {
+constexpr map_type::entry_type entries[] = {
     { "FALSE", detail::keyword_t::boolean_false },
     { "False", detail::keyword_t::boolean_false },
     { "N",     detail::keyword_t::boolean_false },
diff --git a/src/spreadsheet/sheet.cpp b/src/spreadsheet/sheet.cpp
index 4ffa8df7..8c0ca14c 100644
--- a/src/spreadsheet/sheet.cpp
+++ b/src/spreadsheet/sheet.cpp
@@ -263,7 +263,7 @@ void sheet::set_col_width(col_t col, col_t col_span, col_width_t width)
 col_width_t sheet::get_col_width(col_t col, col_t* col_start, col_t* col_end) const
 {
     detail::col_widths_store_type& col_widths = mp_impl->col_widths;
-    if (!col_widths.is_tree_valid())
+    if (!col_widths.valid_tree())
         col_widths.build_tree();
 
     col_width_t ret = 0;
@@ -282,7 +282,7 @@ void sheet::set_col_hidden(col_t col, col_t col_span, bool hidden)
 bool sheet::is_col_hidden(col_t col, col_t* col_start, col_t* col_end) const
 {
     detail::col_hidden_store_type& col_hidden = mp_impl->col_hidden;
-    if (!col_hidden.is_tree_valid())
+    if (!col_hidden.valid_tree())
         col_hidden.build_tree();
 
     bool hidden = false;
@@ -301,7 +301,7 @@ void sheet::set_row_height(row_t row, row_height_t height)
 row_height_t sheet::get_row_height(row_t row, row_t* row_start, row_t* row_end) const
 {
     detail::row_heights_store_type& row_heights = mp_impl->row_heights;
-    if (!row_heights.is_tree_valid())
+    if (!row_heights.valid_tree())
         row_heights.build_tree();
 
     row_height_t ret = 0;
@@ -320,7 +320,7 @@ void sheet::set_row_hidden(row_t row, bool hidden)
 bool sheet::is_row_hidden(row_t row, row_t* row_start, row_t* row_end) const
 {
     detail::row_hidden_store_type& row_hidden = mp_impl->row_hidden;
-    if (!row_hidden.is_tree_valid())
+    if (!row_hidden.valid_tree())
         row_hidden.build_tree();
 
     bool hidden = false;
@@ -486,10 +486,10 @@ void sheet::dump_check(ostream& os, std::string_view sheet_name) const
 
 void sheet::dump_html(std::ostream& os) const
 {
-    if (!mp_impl->col_widths.is_tree_valid())
+    if (!mp_impl->col_widths.valid_tree())
         mp_impl->col_widths.build_tree();
 
-    if (!mp_impl->row_heights.is_tree_valid())
+    if (!mp_impl->row_heights.valid_tree())
         mp_impl->row_heights.build_tree();
 
     detail::html_dumper dumper(mp_impl->doc, mp_impl->merge_ranges, mp_impl->sheet_id);
@@ -522,7 +522,7 @@ size_t sheet::get_cell_format(row_t row, col_t col) const
     if (it != mp_impl->cell_formats.end())
     {
         detail::segment_row_index_type& con = *it->second;
-        if (!con.is_tree_valid())
+        if (!con.valid_tree())
             con.build_tree();
 
         // Return only if the index is not a default index
@@ -532,7 +532,7 @@ size_t sheet::get_cell_format(row_t row, col_t col) const
     }
 
     // Not found in the cell format store. Check the row store.
-    if (!mp_impl->row_formats.is_tree_valid())
+    if (!mp_impl->row_formats.valid_tree())
         mp_impl->row_formats.build_tree();
 
     std::size_t index;
@@ -540,7 +540,7 @@ size_t sheet::get_cell_format(row_t row, col_t col) const
         return index;
 
     // Not found in the row store. Check the column store.
-    if (!mp_impl->column_formats.is_tree_valid())
+    if (!mp_impl->column_formats.valid_tree())
         mp_impl->column_formats.build_tree();
 
     if (mp_impl->column_formats.search_tree(col, index).second && index)
